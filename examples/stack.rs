use anyhow::Result;
use candle_core::{Device, Tensor, D};

fn main() -> Result<()> {
    let a = Tensor::from_slice(&[1f32, -0.5, -2.3, 4., 5., 0.5], (3, 2), &Device::Cpu)?;
    let b = Tensor::from_slice(&[1f32, -0.5, -2.3, 4., 5., 0.5], (3, 2), &Device::Cpu)?;
    let c = Tensor::stack(&[&a, &b], 0)?;
    let d = Tensor::stack(&[&a, &b], D::Minus1)?;

    println!("a");
    println!("{}", a);
    println!("b");
    println!("{}", b);
    println!("c");
    println!("{}", c);
    println!("d");
    println!("{}", d);

    // a
    // [[ 1.0000, -0.5000],
    // [-2.3000,  4.0000],
    // [ 5.0000,  0.5000]]
    // Tensor[[3, 2], f32]
    // b
    // [[ 1.0000, -0.5000],
    // [-2.3000,  4.0000],
    // [ 5.0000,  0.5000]]
    // Tensor[[3, 2], f32]
    // c
    // [[[ 1.0000, -0.5000],
    //  [-2.3000,  4.0000],
    //  [ 5.0000,  0.5000]],
    // [[ 1.0000, -0.5000],
    //  [-2.3000,  4.0000],
    //  [ 5.0000,  0.5000]]]
    // Tensor[[2, 3, 2], f32]
    // d
    // [[[ 1.0000,  1.0000],
    //   [-0.5000, -0.5000]],
    //  [[-2.3000, -2.3000],
    //   [ 4.0000,  4.0000]],
    //  [[ 5.0000,  5.0000],
    //   [ 0.5000,  0.5000]]]
    // Tensor[[3, 2, 2], f32]

    Ok(())
}
